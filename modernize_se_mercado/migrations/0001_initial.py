# Generated by Django 5.1.1 on 2024-11-14 17:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Adicionar_oferta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=150)),
                ('descricao', models.TextField(max_length=600)),
                ('categoria', models.CharField(max_length=100)),
                ('preco_antigo', models.DecimalField(decimal_places=2, max_digits=10)),
                ('preco_atual', models.DecimalField(decimal_places=2, max_digits=10)),
                ('quantidade_disponivel', models.IntegerField()),
                ('data_expiracao', models.DateField()),
                ('imagem_produto', models.ImageField(upload_to='produtos/')),
            ],
        ),
        migrations.CreateModel(
            name='Oferta',
            fields=[
                ('adicionar_oferta_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='modernize_se_mercado.adicionar_oferta')),
                ('status', models.CharField(choices=[('ativo', 'Ativo'), ('expirado', 'Expirado')], max_length=8)),
            ],
            bases=('modernize_se_mercado.adicionar_oferta',),
        ),
        migrations.CreateModel(
            name='UserCadastro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome_mercado', models.CharField(blank=True, max_length=110)),
                ('cnpj', models.CharField(blank=True, max_length=15)),
                ('endereco', models.CharField(blank=True, max_length=110)),
                ('telefone', models.CharField(blank=True, max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254, unique=True)),
                ('groups', models.ManyToManyField(related_name='usercadastro_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='usercadastro_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
